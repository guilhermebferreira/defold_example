local WIDTH = tonumber(sys.get_config("display.width"))
local HEIGHT = tonumber(sys.get_config("display.height"))

local TOUCH = hash("touch")

local function create_bunny(self, position)
	local id = factory.create("#factory", position)
	local duration = position.y / HEIGHT * 3
	duration = math.random(duration * 0.9, duration * 1.1)
	local delay = math.random(1,100) / 75
	go.animate(id, "position.y", go.PLAYBACK_LOOP_PINGPONG, 0, go.EASING_INQUAD, duration, delay)

	self.bunny_count = self.bunny_count + 1
end

function init(self)
	self.bunny_count = 0
	math.randomseed(os.time())
	for i=1,1000 do
		create_bunny(self, vmath.vector3(math.random(1, WIDTH), math.random(HEIGHT * 0.8 / 2, HEIGHT * 1.2 / 2), 0), vmath.vector3(0, 0, 0))
	end
	
	msg.post(".", "acquire_input_focus")
	
	self.frame_count = 0
	self.fps_start = socket.gettime()
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	self.frame_count = self.frame_count + 1
	local fps = self.frame_count / (socket.gettime() - self.fps_start)
	msg.post("@render:", "draw_text", { text = ("Bunnies: %d FPS: %d"):format(self.bunny_count, fps), position = vmath.vector3(10, HEIGHT - 60, 0) } )
end

function on_input(self, action_id, action)
	if action_id == TOUCH and action.released then
		for i=1,1000 do
			create_bunny(self, vmath.vector3(math.random(action.x * 0.8, action.x * 1.2), action.y, 1))
		end
		self.frame_count = 0
		self.fps_start = socket.gettime()
		print(self.bunny_count)
	end
    -- Add input-handling code here
    -- Remove this function if not needed
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end
